	cstr$sugBS=as.matrix(cstr$sugBS[,-c(1,2,3,4,5,6)])#
#
	vglm(cbind(wwA,wosrA,potsA,legA,setA,wbarA,sbarA,sugBA)~wwS+wosrS+potsS+legS+setS+wbarS+sbarS+sugBS,data=df,family=multinomial(refLevel=1),constraints=cstr)#
}
setwd('/Users/iracooke/Projects/JFM/Maps')
vgmod=getVGLMFit(sm,ac);
qr(sm)
rowSums(sm)
sm
sm[,5]=sm[,5]+sapply(1:600,rlnorm(1,sdlog=0.1))
sapply(1:600,rlnorm(1,sdlog=0.1))
sapply(1:600,function(x) rlnorm(1,sdlog=0.1))
rnorm(1,0.1,0.0001)
sm[,5]=sm[,5]+sapply(1:600,function(x) rnorm(1,sdlog=0.1))
sm[,5]=sm[,5]+sapply(1:600,function(x) rnorm(1,sd=0.1))
qr(sm)
setwd('/Users/iracooke/Projects/JFM/Maps')
getVGLMFit<-function(sm,ac){#
	require(VGAM)#
	sm[,5]=sm[,5]+sapply(1:600,function(x) rnorm(1,sd=0.1))#
	df=data.frame(sm,ac)#
	#df=df[-c(44,25,151),] # Massive outliers with very high cooks distance#
	vgmod=vglm(cbind(wwA,wosrA,potsA,legA,setA,wbarA,sbarA,sugBA)~wwS+wosrS+potsS+legS+setS+wbarS+sbarS+sugBS,data=df,family=multinomial(refLevel=1,parallel=TRUE~wwS-1))#
#
	cstr=constraints(vgmod)#
	cstr$wosrS=as.matrix(cstr$wosrS[,-c(2,3,4,5,6,7)])#
	cstr$potsS=as.matrix(cstr$potsS[,-c(1,3,4,5,6,7)])#
	cstr$legS=as.matrix(cstr$legS[,-c(1,2,4,5,6,7)])#
	cstr$setS=as.matrix(cstr$setS[,-c(1,2,3,5,6,7)])#
	cstr$wbarS=as.matrix(cstr$wbarS[,-c(1,2,3,4,6,7)])#
	cstr$sbarS=as.matrix(cstr$sbarS[,-c(1,2,3,4,5,7)])#
	cstr$sugBS=as.matrix(cstr$sugBS[,-c(1,2,3,4,5,6)])#
#
	vglm(cbind(wwA,wosrA,potsA,legA,setA,wbarA,sbarA,sugBA)~wwS+wosrS+potsS+legS+setS+wbarS+sbarS+sugBS,data=df,family=multinomial(refLevel=1),constraints=cstr)#
}
setwd('/Users/iracooke/Projects/JFM/Maps')
getVGLMFit<-function(sm,ac){#
	require(VGAM)#
	sm[,5]=sm[,5]+sapply(1:600,function(x) rnorm(1,sd=0.001))#
	df=data.frame(sm,ac)#
	#df=df[-c(44,25,151),] # Massive outliers with very high cooks distance#
	vgmod=vglm(cbind(wwA,wosrA,potsA,legA,setA,wbarA,sbarA,sugBA)~wwS+wosrS+potsS+legS+setS+wbarS+sbarS+sugBS,data=df,family=multinomial(refLevel=1,parallel=TRUE~wwS-1))#
#
	cstr=constraints(vgmod)#
	cstr$wosrS=as.matrix(cstr$wosrS[,-c(2,3,4,5,6,7)])#
	cstr$potsS=as.matrix(cstr$potsS[,-c(1,3,4,5,6,7)])#
	cstr$legS=as.matrix(cstr$legS[,-c(1,2,4,5,6,7)])#
	cstr$setS=as.matrix(cstr$setS[,-c(1,2,3,5,6,7)])#
	cstr$wbarS=as.matrix(cstr$wbarS[,-c(1,2,3,4,6,7)])#
	cstr$sbarS=as.matrix(cstr$sbarS[,-c(1,2,3,4,5,7)])#
	cstr$sugBS=as.matrix(cstr$sugBS[,-c(1,2,3,4,5,6)])#
#
	vglm(cbind(wwA,wosrA,potsA,legA,setA,wbarA,sbarA,sugBA)~wwS+wosrS+potsS+legS+setS+wbarS+sbarS+sugBS,data=df,family=multinomial(refLevel=1),constraints=cstr)#
}
setwd('/Users/iracooke/Projects/JFM/Maps')
vgmod=getVGLMFit(sm,ac);
Q
setwd('/Users/iracooke/Projects/JFM/Maps')
getVGLMFit<-function(sm,ac){#
	require(VGAM)#
	sm[,5]=sm[,5]+sapply(1:600,function(x) rnorm(1,sd=0.001))#
	print(qr(sm))#
	df=data.frame(sm,ac)#
	#df=df[-c(44,25,151),] # Massive outliers with very high cooks distance#
	vgmod=vglm(cbind(wwA,wosrA,potsA,legA,setA,wbarA,sbarA,sugBA)~wwS+wosrS+potsS+legS+setS+wbarS+sbarS+sugBS,data=df,family=multinomial(refLevel=1,parallel=TRUE~wwS-1))#
#
	cstr=constraints(vgmod)#
	cstr$wosrS=as.matrix(cstr$wosrS[,-c(2,3,4,5,6,7)])#
	cstr$potsS=as.matrix(cstr$potsS[,-c(1,3,4,5,6,7)])#
	cstr$legS=as.matrix(cstr$legS[,-c(1,2,4,5,6,7)])#
	cstr$setS=as.matrix(cstr$setS[,-c(1,2,3,5,6,7)])#
	cstr$wbarS=as.matrix(cstr$wbarS[,-c(1,2,3,4,6,7)])#
	cstr$sbarS=as.matrix(cstr$sbarS[,-c(1,2,3,4,5,7)])#
	cstr$sugBS=as.matrix(cstr$sugBS[,-c(1,2,3,4,5,6)])#
#
	vglm(cbind(wwA,wosrA,potsA,legA,setA,wbarA,sbarA,sugBA)~wwS+wosrS+potsS+legS+setS+wbarS+sbarS+sugBS,data=df,family=multinomial(refLevel=1),constraints=cstr)#
}#
#
vgmod=getVGLMFit(sm,ac);
setwd('/Users/iracooke/Projects/JFM/Maps')
getVGLMFit<-function(sm,ac){#
	require(VGAM)#
	sm[,5]=sm[,5]+sapply(1:600,function(x) rnorm(1,sd=0.001))#
	print(qr(sm))#
	print(sm)#
	df=data.frame(sm,ac)#
	#df=df[-c(44,25,151),] # Massive outliers with very high cooks distance#
	vgmod=vglm(cbind(wwA,wosrA,potsA,legA,setA,wbarA,sbarA,sugBA)~wwS+wosrS+potsS+legS+setS+wbarS+sbarS+sugBS,data=df,family=multinomial(refLevel=1,parallel=TRUE~wwS-1))#
#
	cstr=constraints(vgmod)#
	cstr$wosrS=as.matrix(cstr$wosrS[,-c(2,3,4,5,6,7)])#
	cstr$potsS=as.matrix(cstr$potsS[,-c(1,3,4,5,6,7)])#
	cstr$legS=as.matrix(cstr$legS[,-c(1,2,4,5,6,7)])#
	cstr$setS=as.matrix(cstr$setS[,-c(1,2,3,5,6,7)])#
	cstr$wbarS=as.matrix(cstr$wbarS[,-c(1,2,3,4,6,7)])#
	cstr$sbarS=as.matrix(cstr$sbarS[,-c(1,2,3,4,5,7)])#
	cstr$sugBS=as.matrix(cstr$sugBS[,-c(1,2,3,4,5,6)])#
#
	vglm(cbind(wwA,wosrA,potsA,legA,setA,wbarA,sbarA,sugBA)~wwS+wosrS+potsS+legS+setS+wbarS+sbarS+sugBS,data=df,family=multinomial(refLevel=1),constraints=cstr)#
}#
#
vgmod=getVGLMFit(sm,ac);
setwd('/Users/iracooke/Projects/JFM/Maps')
getVGLMFit<-function(sm,ac){#
	require(VGAM)#
	sm[,5]=sm[,5]+sapply(1:600,function(x) rnorm(1,sd=0.01))#
	print(qr(sm))#
	print(sm)#
	df=data.frame(sm,ac)#
	#df=df[-c(44,25,151),] # Massive outliers with very high cooks distance#
	vgmod=vglm(cbind(wwA,wosrA,potsA,legA,setA,wbarA,sbarA,sugBA)~wwS+wosrS+potsS+legS+setS+wbarS+sbarS+sugBS,data=df,family=multinomial(refLevel=1,parallel=TRUE~wwS-1))#
#
	cstr=constraints(vgmod)#
	cstr$wosrS=as.matrix(cstr$wosrS[,-c(2,3,4,5,6,7)])#
	cstr$potsS=as.matrix(cstr$potsS[,-c(1,3,4,5,6,7)])#
	cstr$legS=as.matrix(cstr$legS[,-c(1,2,4,5,6,7)])#
	cstr$setS=as.matrix(cstr$setS[,-c(1,2,3,5,6,7)])#
	cstr$wbarS=as.matrix(cstr$wbarS[,-c(1,2,3,4,6,7)])#
	cstr$sbarS=as.matrix(cstr$sbarS[,-c(1,2,3,4,5,7)])#
	cstr$sugBS=as.matrix(cstr$sugBS[,-c(1,2,3,4,5,6)])#
#
	vglm(cbind(wwA,wosrA,potsA,legA,setA,wbarA,sbarA,sugBA)~wwS+wosrS+potsS+legS+setS+wbarS+sbarS+sugBS,data=df,family=multinomial(refLevel=1),constraints=cstr)#
}#
#
vgmod=getVGLMFit(sm,ac);
setwd('/Users/iracooke/Projects/JFM/Maps')
getVGLMFit<-function(sm,ac){#
	require(VGAM)#
	sm[,5]=sm[,5]+sapply(1:600,function(x) rnorm(1,sd=1))#
	print(qr(sm))#
	print(sm)#
	df=data.frame(sm,ac)#
	#df=df[-c(44,25,151),] # Massive outliers with very high cooks distance#
	vgmod=vglm(cbind(wwA,wosrA,potsA,legA,setA,wbarA,sbarA,sugBA)~wwS+wosrS+potsS+legS+setS+wbarS+sbarS+sugBS,data=df,family=multinomial(refLevel=1,parallel=TRUE~wwS-1))#
#
	cstr=constraints(vgmod)#
	cstr$wosrS=as.matrix(cstr$wosrS[,-c(2,3,4,5,6,7)])#
	cstr$potsS=as.matrix(cstr$potsS[,-c(1,3,4,5,6,7)])#
	cstr$legS=as.matrix(cstr$legS[,-c(1,2,4,5,6,7)])#
	cstr$setS=as.matrix(cstr$setS[,-c(1,2,3,5,6,7)])#
	cstr$wbarS=as.matrix(cstr$wbarS[,-c(1,2,3,4,6,7)])#
	cstr$sbarS=as.matrix(cstr$sbarS[,-c(1,2,3,4,5,7)])#
	cstr$sugBS=as.matrix(cstr$sugBS[,-c(1,2,3,4,5,6)])#
#
	vglm(cbind(wwA,wosrA,potsA,legA,setA,wbarA,sbarA,sugBA)~wwS+wosrS+potsS+legS+setS+wbarS+sbarS+sugBS,data=df,family=multinomial(refLevel=1),constraints=cstr)#
}#
#
vgmod=getVGLMFit(sm,ac);
setwd('/Users/iracooke/Projects/JFM/Maps')
getVGLMFit<-function(sm,ac){#
	require(VGAM)#
	sm[,5]=sm[,5]+sapply(1:200,function(x) rnorm(1,sd=1))#
	print(qr(sm))#
	print(sm)#
	df=data.frame(sm,ac)#
	#df=df[-c(44,25,151),] # Massive outliers with very high cooks distance#
	vgmod=vglm(cbind(wwA,wosrA,potsA,legA,setA,wbarA,sbarA,sugBA)~wwS+wosrS+potsS+legS+setS+wbarS+sbarS+sugBS,data=df,family=multinomial(refLevel=1,parallel=TRUE~wwS-1))#
#
	cstr=constraints(vgmod)#
	cstr$wosrS=as.matrix(cstr$wosrS[,-c(2,3,4,5,6,7)])#
	cstr$potsS=as.matrix(cstr$potsS[,-c(1,3,4,5,6,7)])#
	cstr$legS=as.matrix(cstr$legS[,-c(1,2,4,5,6,7)])#
	cstr$setS=as.matrix(cstr$setS[,-c(1,2,3,5,6,7)])#
	cstr$wbarS=as.matrix(cstr$wbarS[,-c(1,2,3,4,6,7)])#
	cstr$sbarS=as.matrix(cstr$sbarS[,-c(1,2,3,4,5,7)])#
	cstr$sugBS=as.matrix(cstr$sugBS[,-c(1,2,3,4,5,6)])#
#
	vglm(cbind(wwA,wosrA,potsA,legA,setA,wbarA,sbarA,sugBA)~wwS+wosrS+potsS+legS+setS+wbarS+sbarS+sugBS,data=df,family=multinomial(refLevel=1),constraints=cstr)#
}#
#
vgmod=getVGLMFit(sm,ac);
setwd('/Users/iracooke/Projects/JFM/Maps')
getVGLMFit<-function(sm,ac){#
	require(VGAM)#
	sm[,5]=sm[,5]+sapply(1:600,function(x) rnorm(1,sd=1))#
	sm[,8]=sm[,8]+sapply(1:600,function(x) rnorm(1,sd=1))#
	print(qr(sm))#
	print(sm)#
	df=data.frame(sm,ac)#
	#df=df[-c(44,25,151),] # Massive outliers with very high cooks distance#
	vgmod=vglm(cbind(wwA,wosrA,potsA,legA,setA,wbarA,sbarA,sugBA)~wwS+wosrS+potsS+legS+setS+wbarS+sbarS+sugBS,data=df,family=multinomial(refLevel=1,parallel=TRUE~wwS-1))#
#
	cstr=constraints(vgmod)#
	cstr$wosrS=as.matrix(cstr$wosrS[,-c(2,3,4,5,6,7)])#
	cstr$potsS=as.matrix(cstr$potsS[,-c(1,3,4,5,6,7)])#
	cstr$legS=as.matrix(cstr$legS[,-c(1,2,4,5,6,7)])#
	cstr$setS=as.matrix(cstr$setS[,-c(1,2,3,5,6,7)])#
	cstr$wbarS=as.matrix(cstr$wbarS[,-c(1,2,3,4,6,7)])#
	cstr$sbarS=as.matrix(cstr$sbarS[,-c(1,2,3,4,5,7)])#
	cstr$sugBS=as.matrix(cstr$sugBS[,-c(1,2,3,4,5,6)])#
#
	vglm(cbind(wwA,wosrA,potsA,legA,setA,wbarA,sbarA,sugBA)~wwS+wosrS+potsS+legS+setS+wbarS+sbarS+sugBS,data=df,family=multinomial(refLevel=1),constraints=cstr)#
}#
#
vgmod=getVGLMFit(sm,ac);
setwd('/Users/iracooke/Projects/JFM/Maps')
getVGLMFit<-function(sm,ac){#
	require(VGAM)#
	sm[,5]=sm[,5]+sapply(1:600,function(x) rnorm(1,sd=0.01))#
	sm[,8]=sm[,8]+sapply(1:600,function(x) rnorm(1,sd=0.01))#
	print(qr(sm))#
	print(sm)#
	df=data.frame(sm,ac)#
	#df=df[-c(44,25,151),] # Massive outliers with very high cooks distance#
	vgmod=vglm(cbind(wwA,wosrA,potsA,legA,setA,wbarA,sbarA,sugBA)~wwS+wosrS+potsS+legS+setS+wbarS+sbarS+sugBS,data=df,family=multinomial(refLevel=1,parallel=TRUE~wwS-1))#
#
	cstr=constraints(vgmod)#
	cstr$wosrS=as.matrix(cstr$wosrS[,-c(2,3,4,5,6,7)])#
	cstr$potsS=as.matrix(cstr$potsS[,-c(1,3,4,5,6,7)])#
	cstr$legS=as.matrix(cstr$legS[,-c(1,2,4,5,6,7)])#
	cstr$setS=as.matrix(cstr$setS[,-c(1,2,3,5,6,7)])#
	cstr$wbarS=as.matrix(cstr$wbarS[,-c(1,2,3,4,6,7)])#
	cstr$sbarS=as.matrix(cstr$sbarS[,-c(1,2,3,4,5,7)])#
	cstr$sugBS=as.matrix(cstr$sugBS[,-c(1,2,3,4,5,6)])#
#
	vglm(cbind(wwA,wosrA,potsA,legA,setA,wbarA,sbarA,sugBA)~wwS+wosrS+potsS+legS+setS+wbarS+sbarS+sugBS,data=df,family=multinomial(refLevel=1),constraints=cstr)#
}#
#
vgmod=getVGLMFit(sm,ac);
setwd('/Users/iracooke/Projects/JFM/Maps')
getVGLMFit<-function(sm,ac){#
	require(VGAM)#
	sm[,5]=sm[,5]+sapply(1:600,function(x) rnorm(1,sd=0.01))#
	sm[,8]=sm[,8]+sapply(1:600,function(x) rnorm(1,sd=0.01))#
#	print(qr(sm))#
	print(rowSums(sm))#
	df=data.frame(sm,ac)#
	#df=df[-c(44,25,151),] # Massive outliers with very high cooks distance#
	vgmod=vglm(cbind(wwA,wosrA,potsA,legA,setA,wbarA,sbarA,sugBA)~wwS+wosrS+potsS+legS+setS+wbarS+sbarS+sugBS,data=df,family=multinomial(refLevel=1,parallel=TRUE~wwS-1))#
#
	cstr=constraints(vgmod)#
	cstr$wosrS=as.matrix(cstr$wosrS[,-c(2,3,4,5,6,7)])#
	cstr$potsS=as.matrix(cstr$potsS[,-c(1,3,4,5,6,7)])#
	cstr$legS=as.matrix(cstr$legS[,-c(1,2,4,5,6,7)])#
	cstr$setS=as.matrix(cstr$setS[,-c(1,2,3,5,6,7)])#
	cstr$wbarS=as.matrix(cstr$wbarS[,-c(1,2,3,4,6,7)])#
	cstr$sbarS=as.matrix(cstr$sbarS[,-c(1,2,3,4,5,7)])#
	cstr$sugBS=as.matrix(cstr$sugBS[,-c(1,2,3,4,5,6)])#
#
	vglm(cbind(wwA,wosrA,potsA,legA,setA,wbarA,sbarA,sugBA)~wwS+wosrS+potsS+legS+setS+wbarS+sbarS+sugBS,data=df,family=multinomial(refLevel=1),constraints=cstr)#
}#
#
vgmod=getVGLMFit(sm,ac);
setwd('/Users/iracooke/Projects/JFM/Maps')
getVGLMFit<-function(sm,ac){#
	require(VGAM)#
	sm[,5]=sm[,5]+sapply(1:600,function(x) rnorm(1,sd=0.001))#
	sm[,8]=sm[,8]+sapply(1:600,function(x) rnorm(1,sd=0.001))#
#	print(qr(sm))#
	print(rowSums(sm))#
	df=data.frame(sm,ac)#
	#df=df[-c(44,25,151),] # Massive outliers with very high cooks distance#
	vgmod=vglm(cbind(wwA,wosrA,potsA,legA,setA,wbarA,sbarA,sugBA)~wwS+wosrS+potsS+legS+setS+wbarS+sbarS+sugBS,data=df,family=multinomial(refLevel=1,parallel=TRUE~wwS-1))#
#
	cstr=constraints(vgmod)#
	cstr$wosrS=as.matrix(cstr$wosrS[,-c(2,3,4,5,6,7)])#
	cstr$potsS=as.matrix(cstr$potsS[,-c(1,3,4,5,6,7)])#
	cstr$legS=as.matrix(cstr$legS[,-c(1,2,4,5,6,7)])#
	cstr$setS=as.matrix(cstr$setS[,-c(1,2,3,5,6,7)])#
	cstr$wbarS=as.matrix(cstr$wbarS[,-c(1,2,3,4,6,7)])#
	cstr$sbarS=as.matrix(cstr$sbarS[,-c(1,2,3,4,5,7)])#
	cstr$sugBS=as.matrix(cstr$sugBS[,-c(1,2,3,4,5,6)])#
#
	vglm(cbind(wwA,wosrA,potsA,legA,setA,wbarA,sbarA,sugBA)~wwS+wosrS+potsS+legS+setS+wbarS+sbarS+sugBS,data=df,family=multinomial(refLevel=1),constraints=cstr)#
}#
#
vgmod=getVGLMFit(sm,ac);
vgmod
summary(mcsample)
vgmod
sumry=summary(mcsample)
sumry$statistics
vgmod
predict(vgmod)
?predict
setwd('/Users/iracooke/Projects/JFM/Maps')
plotResiduals <- function(mcsample,ac,sm,method="spatial",asHist=FALSE,resid=NULL,...){#
	stats=summary(mcsample)$statistics#
#
	acm=ac[,-1]#
	eta=data.frame(t(sapply(1:length(ac[,1]),function(x) as.numeric(acm[x,]/ac[x,1]) )))#
#
	if ( is.null(resid)){#
		if ( method=="spatial"){#
			pr=llcropChoiceSpatialProperPredict(stats[,1],neighbours[[1]],neighbours[[2]],yvect,ny,xvect,Nvect,8,TRUE)#
		} else {#
			pr=vglmpredict(stats,sm,ac=NULL,useMissing=TRUE,asEta=TRUE,useRho=FALSE)#
		}#
		resid=pr-eta#
	}#
	par(mfcol=c(4,2))#
	for ( i in 1:length(resid[1,]) ) {#
		if ( asHist ){#
			hist(resid[,i],main=names(ac)[i+1])#
			cat("Mean of ",names(ac)[i+1]," is ",mean(resid[,i]),"\n")#
		} else {#
			plot(sm[,i+1],resid[,i],main=names(ac)[i+1],...)#
		}#
	}#
}
setwd('/Users/iracooke/Projects/JFM/Maps')
plotResiduals <- function(mcsample,ac,sm,method="spatial",asHist=FALSE,pr=NULL,...){#
	stats=summary(mcsample)$statistics#
#
	acm=ac[,-1]#
	eta=data.frame(t(sapply(1:length(ac[,1]),function(x) as.numeric(acm[x,]/ac[x,1]) )))#
#
	if ( is.null(pr)){#
		if ( method=="spatial"){#
			pr=llcropChoiceSpatialProperPredict(stats[,1],neighbours[[1]],neighbours[[2]],yvect,ny,xvect,Nvect,8,TRUE)#
		} else {#
			pr=vglmpredict(stats,sm,ac=NULL,useMissing=TRUE,asEta=TRUE,useRho=FALSE)#
		}#
#
	}#
	resid=pr-eta#
	par(mfcol=c(4,2))#
	for ( i in 1:length(resid[1,]) ) {#
		if ( asHist ){#
			hist(resid[,i],main=names(ac)[i+1])#
			cat("Mean of ",names(ac)[i+1]," is ",mean(resid[,i]),"\n")#
		} else {#
			plot(sm[,i+1],resid[,i],main=names(ac)[i+1],...)#
		}#
	}#
}
setwd('/Users/iracooke/Projects/JFM/Maps')
plotResiduals(mcsample,ac,sm,asHist=TRUE,pr=predict(vgmod))
setwd('/Users/iracooke/Projects/JFM/Maps')
plotResiduals(mcsample,ac,sm,ylim=c(-1,1),asHist=TRUE)
setwd('/Users/iracooke/Projects/JFM/Maps')
#
plotResiduals <- function(mcsample,ac,sm,method="spatial",asHist=FALSE,pr=NULL,...){#
	stats=summary(mcsample)$statistics#
#
	acm=ac[,-1]#
	eta=data.frame(t(sapply(1:length(ac[,1]),function(x) as.numeric(acm[x,]/ac[x,1]) )))#
	browser()#
	if ( is.null(pr)){#
		if ( method=="spatial"){#
			pr=llcropChoiceSpatialProperPredict(stats[,1],neighbours[[1]],neighbours[[2]],yvect,ny,xvect,Nvect,8,TRUE)#
		} else {#
			pr=vglmpredict(stats,sm,ac=NULL,useMissing=TRUE,asEta=TRUE,useRho=FALSE)#
		}#
#
	}#
	resid=pr-eta#
	par(mfcol=c(4,2))#
	for ( i in 1:length(resid[1,]) ) {#
		if ( asHist ){#
			hist(resid[,i],main=names(ac)[i+1])#
			cat("Mean of ",names(ac)[i+1]," is ",mean(resid[,i]),"\n")#
		} else {#
			plot(sm[,i+1],resid[,i],main=names(ac)[i+1],...)#
		}#
	}#
}
setwd('/Users/iracooke/Projects/JFM/Maps')
plotResiduals(mcsample,ac,sm,ylim=c(-1,1),asHist=TRUE)
eta
length(predict(vgmod))
matrix(predict(vgmod),nrow=600)
pr=matrix(predict(vgmod),nrow=600)
plotResiduals(mcsample,ac,sm,ylim=c(-1,1),asHist=TRUE)
?matrix
pr=matrix(predict(vgmod),nrow=600,byrow=T)
plotResiduals(mcsample,ac,sm,ylim=c(-1,1),asHist=TRUE)
pr=matrix(predict(vgmod),nrow=600)
eta
plotResiduals(mcsample,ac,sm,ylim=c(-1,1),asHist=TRUE)
eta
Q
setwd('/Users/iracooke/Projects/JFM/Maps')
plotResiduals <- function(mcsample,ac,sm,method="spatial",asHist=FALSE,pr=NULL,...){#
	stats=summary(mcsample)$statistics#
#
	acm=ac[,-1]#
	eta=data.frame(t(sapply(1:length(ac[,1]),function(x) log(as.numeric(acm[x,]/ac[x,1])) )))#
	browser()#
	if ( is.null(pr)){#
		if ( method=="spatial"){#
			pr=llcropChoiceSpatialProperPredict(stats[,1],neighbours[[1]],neighbours[[2]],yvect,ny,xvect,Nvect,8,TRUE)#
		} else {#
			pr=vglmpredict(stats,sm,ac=NULL,useMissing=TRUE,asEta=TRUE,useRho=FALSE)#
		}#
#
	}#
	resid=pr-eta#
	par(mfcol=c(4,2))#
	for ( i in 1:length(resid[1,]) ) {#
		if ( asHist ){#
			hist(resid[,i],main=names(ac)[i+1])#
			cat("Mean of ",names(ac)[i+1]," is ",mean(resid[,i]),"\n")#
		} else {#
			plot(sm[,i+1],resid[,i],main=names(ac)[i+1],...)#
		}#
	}#
}
plotResiduals(mcsample,ac,sm,ylim=c(-1,1),asHist=TRUE)
eta
plotResiduals(mcsample,ac,sm,ylim=c(-1,1),asHist=TRUE)
setwd('/Users/iracooke/Projects/JFM/Maps')
plotResiduals <- function(mcsample,ac,sm,method="spatial",asHist=FALSE,pr=NULL,...){#
	stats=summary(mcsample)$statistics#
#
	acm=ac[,-1]#
	eta=data.frame(t(sapply(1:length(ac[,1]),function(x) log(as.numeric(acm[x,]/ac[x,1])) )))#
#	browser()#
	if ( is.null(pr)){#
		if ( method=="spatial"){#
			pr=llcropChoiceSpatialProperPredict(stats[,1],neighbours[[1]],neighbours[[2]],yvect,ny,xvect,Nvect,8,TRUE)#
		} else {#
			pr=vglmpredict(stats,sm,ac=NULL,useMissing=TRUE,asEta=TRUE,useRho=FALSE)#
		}#
#
	}#
	resid=pr-eta#
	par(mfcol=c(4,2))#
	for ( i in 1:length(resid[1,]) ) {#
		if ( asHist ){#
			hist(resid[,i],main=names(ac)[i+1])#
			cat("Mean of ",names(ac)[i+1]," is ",mean(resid[,i]),"\n")#
		} else {#
			plot(sm[,i+1],resid[,i],main=names(ac)[i+1],...)#
		}#
	}#
}
setwd('/Users/iracooke/Projects/JFM/Maps')
plotResiduals(mcsample,ac,sm,ylim=c(-1,1),asHist=TRUE)
setwd('/Users/iracooke/Projects/JFM/Maps')
plotResiduals <- function(mcsample,ac,sm,method="spatial",asHist=FALSE,pr=NULL,asEta=FALSE,...){#
	stats=summary(mcsample)$statistics#
#
#
#	browser()#
	if ( is.null(pr)){#
		if ( method=="spatial"){#
			pr=llcropChoiceSpatialProperPredict(stats[,1],neighbours[[1]],neighbours[[2]],yvect,ny,xvect,Nvect,8,TRUE)#
		} else {#
			pr=vglmpredict(stats,sm,ac=NULL,useMissing=TRUE,asEta=TRUE,useRho=FALSE)#
		}#
#
	}#
	resid=c()#
	if ( !asEta){#
		# Now convert pr to actual predictions not eta#
		browser()#
	} else {#
		acm=ac[,-1]#
		eta=data.frame(t(sapply(1:length(ac[,1]),function(x) log(as.numeric(acm[x,]/ac[x,1])) )))#
		resid=pr-eta#
	}#
#
	par(mfcol=c(4,2))#
	for ( i in 1:length(resid[1,]) ) {#
		if ( asHist ){#
			hist(resid[,i],main=names(ac)[i+1])#
			cat("Mean of ",names(ac)[i+1]," is ",mean(resid[,i]),"\n")#
		} else {#
			plot(sm[,i+1],resid[,i],main=names(ac)[i+1],...)#
		}#
	}#
}
setwd('/Users/iracooke/Projects/JFM/Maps')
plotResiduals(mcsample,ac,sm,ylim=c(-1,1),asHist=TRUE)
pr
rowSums(pr)
rowSums(ac)
mean(rowSums(ac))
chunk=10
chunk=25
pr=pr*(250/chunk)
resid=pr-ac
resid
resid=pr-ac
Q
setwd('/Users/iracooke/Projects/JFM/Maps')
plotResiduals <- function(mcsample,ac,sm,chunk,method="spatial",asHist=FALSE,pr=NULL,...){#
	stats=summary(mcsample)$statistics#
	#
#	browser()#
	if ( is.null(pr)){#
		if ( method=="spatial"){#
			pr=llcropChoiceSpatialProperPredict(stats[,1],neighbours[[1]],neighbours[[2]],yvect,ny,xvect,Nvect,8,TRUE)#
		} else {#
			cat("Warning the method vglmpredict is probably wrong. Remove stop() call to proceed")#
			stop()#
			pr=vglmpredict(stats,sm,ac=NULL,useMissing=TRUE,asEta=TRUE,useRho=FALSE)#
		}#
#
	}#
	resid=c()#
	# Now convert pr to actual predictions not eta#
	pr=pr*(250/chunk)#
	resid=pr-ac#
#
	par(mfcol=c(4,2))#
	for ( i in 1:length(resid[1,]) ) {#
		if ( asHist ){#
			hist(resid[,i],main=names(ac)[i])#
			cat("Mean of ",names(ac)[i]," is ",mean(resid[,i]),"\n")#
		} else {#
			plot(sm[,i],resid[,i],main=names(ac)[i],...)#
		}#
	}#
}
setwd('/Users/iracooke/Projects/JFM/Maps')
plotResiduals(mcsample,ac,sm,ylim=c(-1,1),asHist=TRUE)
setwd('/Users/iracooke/Projects/JFM/Maps')
plotResiduals(mcsample,ac,sm,chunk=25,ylim=c(-1,1),asHist=TRUE)
setwd('/Users/iracooke/Projects/JFM/Maps')
plotResiduals(mcsample,ac,sm,chunk=25)
