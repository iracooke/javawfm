	#
#
	#
	bootmeans=sapply(boots,function(x) mean(x$t))#
	confints=lapply(boots,bootci)		#
	cui=sapply(confints,function(x) x[2])#
	cli=sapply(confints,function(x) x[1])#
#
#
	browser()#
#
	plotCI(x=mns,ui=cui,li=cli)#
#
}#
#
#
printBirdProjections(scenarioNames,changes)
n
bootrow(x,100)
x
m
setwd('/Users/iracooke/Projects/JFM/BTOBirds')
sortedMeanplot<-function(change,ylab="Percent Change",xlab="Species",...){#
	mns=sapply(change,function(x) { mean(as.vector(x))} )	#
	sortednames=names(sort(mns))#
	mns=mns[sortednames]#
	change=change[sortednames]#
	bootci<-function(bx){#
#		bx=boot(x,function(x,i){mean(x[i])},1000)#
		quantile(bx$t,c(0.025,0.975))#
	}#
#
	x=change[[1]]#
	bootrow(x,100)#
#
	xl=as.vector(x)#
	xids=sapply(1:208,function(x) 1:100))#
	xn=data.frame(xl,as.factor(xid))#
#
	sboot=boot(xn[,1],function(x,i){mean(x[i])},1000,strata=xn[,2])#
	#
	boots=lapply(change,function(x) boot(as.vector(x),function(x,i){mean(x[i,1])},1000))#
	#
#
	#
	bootmeans=sapply(boots,function(x) mean(x$t))#
	confints=lapply(boots,bootci)		#
	cui=sapply(confints,function(x) x[2])#
	cli=sapply(confints,function(x) x[1])#
#
#
	browser()#
#
	plotCI(x=mns,ui=cui,li=cli)#
#
}#
#
#
printBirdProjections(scenarioNames,changes)
setwd('/Users/iracooke/Projects/JFM/BTOBirds')
require(farmland)#
require(relu)#
require(sp)#
require(birds)#
require(boot)#
require(gplots)#
#
source("functions.R")#
#
#data(SoilRainfall)#
data(BBSNewModelCoefficients)#
data(BTORegions)#
data(AgFutures)#
#
#
scenarioNames=names(AgFutures2080)#
scenarioNames=sapply(scenarioNames,function(x) paste(c("map",x),collapse="."))#
#
species=names(BBSModelCoefficients)#
#
habitatVariables=prepareHabitatVariables()#
#
createScenarioFilenames<-function(scenarioNames,AgFutures2080,setasideBounds){#
	# Variable defaults#
	pdname="agfutures.MOTAD.NCdp.lins.sw.sosr"#
	risktype="motadrisk"#
	cropComplexity=0#
	risk=0#
	mounames=risktype#
	mouweights=c(1.0)#
	setasideBounds=c(20,125)#
	filenames=c()#
	for (si in 1:length(scenarioNames)){#
		Scenario=data.frame(t(AgFutures2080[,si]))#
		names(Scenario) <- rownames(AgFutures2080)#
		Scenario=0.01*Scenario#
		sab=setasideBounds#
		sab[1]=setasideBounds[1]*Scenario$Setaside.quota#
		filename=makePathname(pdname,FALSE,c(),sab,risk,cropComplexity,2004,2004,prefix=scenarioNames[si]);#
		filename=paste(c("../AgFutures/",filename),collapse="")#
		print(filename)#
		filenames[si]=filename#
	}#
	filenames#
}#
#
# Print out all the bird projections#
#
#
#createBirdMaps<-function(scenarioFilenames,BTORegions,BBSModelCoefficients,...){#
#	birdMaps=list()#
#	for (si in 1:length(scenarioFilenames)){#
#		birdMaps[[si]]=btoPredictMap(scenarioFilenames[si],BTORegions,BBSModelCoefficients,...);#
#	}#
#	birdMaps#
#}#
#
#createCropMaps<-function(scenarioFilenames){#
#	cropMaps=list()#
#	for(ci in 1:length(scenarioFilenames)){#
#		cropMaps[[ci]]=cropMap(scenarioFilenames[ci])#
#	}#
#	cropMaps#
#}#
#
#
createSpeciesSummaries<-function(scenarioFilenames,BTORegions,BBSModelCoefficients,writeResults=FALSE,variableSummaries=NULL){#
	species=names(BBSModelCoefficients)#
	#Create summary info so we can interpret the overall results#
	if ( length(variableSummaries)==0){#
		variableSummaries=lapply(scenarioFilenames,function(x) summarizeModels(x,BTORegions,BBSModelCoefficients))#
	}#
	varMeans=lapply(variableSummaries,function(x) lapply(x,function(y) y$means))#
	varModels=lapply(variableSummaries,function(x) lapply(x,function(y) y$model))#
	variableChanges=listChanges(varMeans,varMeans[[1]],method=absoluteChange)#
	# Now arrange the changes by species#
	varChangesBySpecies=list()#
	varModelsBySpecies=list()#
	for(s in 1:length(species)){#
		cng=list()#
		mdl=list()#
		for(c in 1:length(variableChanges)){#
			cng[[c]]=variableChanges[[c]][[s]]#
			mdl[[c]]=varModels[[c]][[s]]#
		}#
#
		names(mdl)<-names(scenarioNames)#
		names(cng)<-names(scenarioNames)#
		varModelsBySpecies[[s]]=mdl	#
		varChangesBySpecies[[s]]=cng#
	}#
	names(varChangesBySpecies)<-species#
	names(varModelsBySpecies)<-species#
	if ( writeResults){#
		sapply(1:length(species),function(x) write.csv(varChangesBySpecies[[x]],file=paste(c(species[x],".csv"),collapse="")))#
		sapply(1:length(species),function(x) write.csv(varModelsBySpecies[[x]][[1]],file=paste(c(species[x],"model.csv"),collapse="")))#
	}#
	list(varChangesBySpecies,varModelsBySpecies)#
}#
#
scenarioFilenames=createScenarioFilenames(scenarioNames,AgFutures2080,setasideBounds)#
#
#speciesSummaries=createSpeciesSummaries(scenarioFilenames,BTORegions,BBSModelCoefficients,writeResults=TRUE)#
#
#
#
birdMaps<-lapply(scenarioFilenames,function(x) btoPredictMap(x,BTORegions,BBSModelCoefficients,nBBSSamp=100))#
#birdMaps=createBirdMaps(scenarioFilenames,BTORegions,BBSModelCoefficients,nBBSSamp=100)#
pchanges=listChanges(birdMaps,birdMaps[[1]])#
save(pchanges,file="cache.RData")#
#
printBirdProjections(scenarioNames,pchanges,outline=FALSE,ylim=c(-100,400))#
#
cropMaps=lapply(scenarioFilenames,function(x) cropMap(x))#
startEPSDevice("crops",16,8)#
spatialListBarplot(cropMaps,ins=-0.085,rmcols=c(),asSPDF=TRUE,normalize=TRUE,names.arg=names(AgFutures2080),marg=c(5,4,4,7))#
dev.off()
setwd('/Users/iracooke/Projects/JFM/BTOBirds')
require(farmland)#
require(relu)#
require(sp)#
require(birds)#
require(boot)#
require(gplots)#
#
data(BBSNewModelCoefficients)#
data(BTORegions)#
data(AgFutures)#
#
#
scenarioNames=names(AgFutures2080)#
scenarioNames=sapply(scenarioNames,function(x) paste(c("map",x),collapse="."))#
#
species=names(BBSModelCoefficients)#
#
habitatVariables=prepareHabitatVariables()#
#
createScenarioFilenames<-function(scenarioNames,AgFutures2080,setasideBounds){#
	# Variable defaults#
	pdname="agfutures.MOTAD.NCdp.lins.sw.sosr"#
	risktype="motadrisk"#
	cropComplexity=0#
	risk=0#
	mounames=risktype#
	mouweights=c(1.0)#
	setasideBounds=c(20,125)#
	filenames=c()#
	for (si in 1:length(scenarioNames)){#
		Scenario=data.frame(t(AgFutures2080[,si]))#
		names(Scenario) <- rownames(AgFutures2080)#
		Scenario=0.01*Scenario#
		sab=setasideBounds#
		sab[1]=setasideBounds[1]*Scenario$Setaside.quota#
		filename=makePathname(pdname,FALSE,c(),sab,risk,cropComplexity,2004,2004,prefix=scenarioNames[si]);#
		filename=paste(c("../AgFutures/",filename),collapse="")#
		print(filename)#
		filenames[si]=filename#
	}#
	filenames#
}#
#
#
#
createSpeciesSummaries<-function(scenarioFilenames,BTORegions,BBSModelCoefficients,writeResults=FALSE,variableSummaries=NULL){#
	species=names(BBSModelCoefficients)#
	#Create summary info so we can interpret the overall results#
	if ( length(variableSummaries)==0){#
		variableSummaries=lapply(scenarioFilenames,function(x) summarizeModels(x,BTORegions,BBSModelCoefficients))#
	}#
	varMeans=lapply(variableSummaries,function(x) lapply(x,function(y) y$means))#
	varModels=lapply(variableSummaries,function(x) lapply(x,function(y) y$model))#
	variableChanges=listChanges(varMeans,varMeans[[1]],method=absoluteChange)#
	# Now arrange the changes by species#
	varChangesBySpecies=list()#
	varModelsBySpecies=list()#
	for(s in 1:length(species)){#
		cng=list()#
		mdl=list()#
		for(c in 1:length(variableChanges)){#
			cng[[c]]=variableChanges[[c]][[s]]#
			mdl[[c]]=varModels[[c]][[s]]#
		}#
#
		names(mdl)<-names(scenarioNames)#
		names(cng)<-names(scenarioNames)#
		varModelsBySpecies[[s]]=mdl	#
		varChangesBySpecies[[s]]=cng#
	}#
	names(varChangesBySpecies)<-species#
	names(varModelsBySpecies)<-species#
	if ( writeResults){#
		sapply(1:length(species),function(x) write.csv(varChangesBySpecies[[x]],file=paste(c(species[x],".csv"),collapse="")))#
		sapply(1:length(species),function(x) write.csv(varModelsBySpecies[[x]][[1]],file=paste(c(species[x],"model.csv"),collapse="")))#
	}#
	list(varChangesBySpecies,varModelsBySpecies)#
}#
#
scenarioFilenames=createScenarioFilenames(scenarioNames,AgFutures2080,setasideBounds)#
#
# Print out some info so we can interpret the BTO results#
#speciesSummaries=createSpeciesSummaries(scenarioFilenames,BTORegions,BBSModelCoefficients,writeResults=TRUE)#
#
birdMaps<-lapply(scenarioFilenames,function(x) btoPredictMap(x,BTORegions,BBSModelCoefficients,nBBSSamp=100,threshold=0.5))#
pchanges=listChanges(birdMaps,birdMaps[[1]])#
save(pchanges,file="cache.RData")#
#
printBirdProjections(scenarioNames,pchanges,outline=FALSE,ylim=c(-100,400))#
#
cropMaps=lapply(scenarioFilenames,function(x) cropMap(x))#
startEPSDevice("crops",16,8)#
spatialListBarplot(cropMaps,ins=-0.085,rmcols=c(),asSPDF=TRUE,normalize=TRUE,names.arg=names(AgFutures2080),marg=c(5,4,4,7))#
dev.off()
setwd('/Users/iracooke/Projects/JFM/BTOBirds')
require(farmland)#
require(relu)#
require(sp)#
require(birds)#
require(boot)#
require(gplots)#
#
data(BBSNewModelCoefficients)#
data(BTORegions)#
data(AgFutures)#
#
createScenarioFilenames<-function(setasideVals){#
	# Variable defaults#
	pdname="defra.MOTAD.NCdp.lins.sw.sosr"#
	risktype="motadrisk"#
	cropComplexity=0#
	risk=0#
	mounames=risktype#
	mouweights=c(1.0)#
#
	filenames=c()#
	for (si in 1:length(setasideVals)){#
		setasideBounds=c(setasideVals[si],125)#
		sab=setasideBounds#
		filename=makePathname(pdname,FALSE,c(),sab,risk,cropComplexity,2004,2004);#
		filename=paste(c("../Maps/",filename),collapse="")#
		print(filename)#
		filenames[si]=filename#
	}#
	filenames#
}#
#
habitatVariables=prepareHabitatVariables()#
setasidevals=c(20,0)#
scenariofiles=createScenarioFilenames(setasidevals)#
#
birdMaps<-lapply(scenariofiles,function(x) btoPredictMap(x,BTORegions,BBSModelCoefficients,nBBSSamp=100,threshold=0.5))#
pchanges=listChanges(birdMaps,birdMaps[[1]])#
save(pchanges,file="cache.RData")#
#
printBirdProjections(c("8","0"),pchanges,outline=FALSE,ylim=c(-100,400))#
#
cropMaps=lapply(scenariofiles,function(x) cropMap(x))#
startEPSDevice("crops",16,8)#
spatialListBarplot(cropMaps,ins=-0.085,rmcols=c(),asSPDF=TRUE,normalize=TRUE,names.arg=c("0","8"),marg=c(5,4,4,7))#
dev.off()
setwd('/Users/iracooke/Projects/JFM/BTOBirds')
#
birdMaps<-lapply(scenariofiles,function(x) btoPredictMap(x,BTORegions,BBSModelCoefficients,nBBSSamp=100,threshold=0.7))#
pchanges=listChanges(birdMaps,birdMaps[[1]])#
save(pchanges,file="cache.RData")#
#
printBirdProjections(c("8","0"),pchanges,outline=FALSE,ylim=c(-100,400))#
#
cropMaps=lapply(scenariofiles,function(x) cropMap(x))#
startEPSDevice("crops",16,8)#
spatialListBarplot(cropMaps,ins=-0.085,rmcols=c(),asSPDF=TRUE,normalize=TRUE,names.arg=c("0","8"),marg=c(5,4,4,7))#
dev.off()
BBSModelCoefficients[1,]
BBSModelCoefficients[[1]]
BBSModelCoefficients[["BF"]]
setwd('/Users/iracooke/Projects/JFM/BTOBirds')
require(farmland)#
require(relu)#
require(sp)#
require(birds)#
require(boot)#
require(gplots)#
#
data(BBSNewModelCoefficients)#
data(BTORegions)#
data(AgFutures)#
source("../R/birds/R/Cropping.R")#
createScenarioFilenames<-function(setasideVals){#
	# Variable defaults#
	pdname="defra.MOTAD.NCdp.lins.sw.sosr"#
	risktype="motadrisk"#
	cropComplexity=0#
	risk=0#
	mounames=risktype#
	mouweights=c(1.0)#
#
	filenames=c()#
	for (si in 1:length(setasideVals)){#
		setasideBounds=c(setasideVals[si],125)#
		sab=setasideBounds#
		filename=makePathname(pdname,FALSE,c(),sab,risk,cropComplexity,2004,2004);#
		filename=paste(c("../Maps/",filename),collapse="")#
		print(filename)#
		filenames[si]=filename#
	}#
	filenames#
}#
#
habitatVariables=prepareHabitatVariables()#
setasidevals=c(20,0)#
scenariofiles=createScenarioFilenames(setasidevals)#
#
birdMaps<-lapply(scenariofiles,function(x) btoPredictMap(x,BTORegions,BBSModelCoefficients,nBBSSamp=100,threshold=0.7))#
pchanges=listChanges(birdMaps,birdMaps[[1]])#
save(pchanges,file="cache.RData")#
#
printBirdProjections(c("8","0"),pchanges,outline=FALSE,ylim=c(-100,400))#
#
cropMaps=lapply(scenariofiles,function(x) cropMap(x))#
startEPSDevice("crops",16,8)#
spatialListBarplot(cropMaps,ins=-0.085,rmcols=c(),asSPDF=TRUE,normalize=TRUE,names.arg=c("0","8"),marg=c(5,4,4,7))#
dev.off()
setwd('/Users/iracooke/Projects/JFM/BTOBirds')
source("../R/birds/R/Cropping.R")
setwd('/Users/iracooke/Projects/JFM/BTOBirds')
require(farmland)#
require(relu)#
require(sp)#
require(birds)#
require(boot)#
require(gplots)#
#
data(BBSNewModelCoefficients)#
data(BTORegions)#
data(AgFutures)#
source("../R/birds/R/Cropping.R")#
createScenarioFilenames<-function(setasideVals){#
	# Variable defaults#
	pdname="defra.MOTAD.NCdp.lins.sw.sosr"#
	risktype="motadrisk"#
	cropComplexity=0#
	risk=0#
	mounames=risktype#
	mouweights=c(1.0)#
#
	filenames=c()#
	for (si in 1:length(setasideVals)){#
		setasideBounds=c(setasideVals[si],125)#
		sab=setasideBounds#
		filename=makePathname(pdname,FALSE,c(),sab,risk,cropComplexity,2004,2004);#
		filename=paste(c("../Maps/",filename),collapse="")#
		print(filename)#
		filenames[si]=filename#
	}#
	filenames#
}#
#
habitatVariables=prepareHabitatVariables()#
setasidevals=c(20,0)#
scenariofiles=createScenarioFilenames(setasidevals)#
#
birdMaps<-lapply(scenariofiles,function(x) btoPredictMap(x,BTORegions,BBSModelCoefficients,nBBSSamp=100,threshold=0.7))#
pchanges=listChanges(birdMaps,birdMaps[[1]])#
save(pchanges,file="cache.RData")#
#
printBirdProjections(c("8","0"),pchanges,outline=FALSE,ylim=c(-100,400))#
#
cropMaps=lapply(scenariofiles,function(x) cropMap(x))#
startEPSDevice("crops",16,8)#
spatialListBarplot(cropMaps,ins=-0.085,rmcols=c(),asSPDF=TRUE,normalize=TRUE,names.arg=c("0","8"),marg=c(5,4,4,7))#
dev.off()
setwd('/Users/iracooke/Projects/JFM/BTOBirds')
require(farmland)#
require(relu)#
require(sp)#
require(birds)#
require(boot)#
require(gplots)#
#
data(BBSNewModelCoefficients)#
data(BTORegions)#
data(AgFutures)#
#
source("../R/birds/R/Cropping.R")#
source("../R/birds/R/BTO.R")#
#
createScenarioFilenames<-function(setasideVals){#
	# Variable defaults#
	pdname="defra.MOTAD.NCdp.lins.sw.sosr"#
	risktype="motadrisk"#
	cropComplexity=0#
	risk=0#
	mounames=risktype#
	mouweights=c(1.0)#
#
	filenames=c()#
	for (si in 1:length(setasideVals)){#
		setasideBounds=c(setasideVals[si],125)#
		sab=setasideBounds#
		filename=makePathname(pdname,FALSE,c(),sab,risk,cropComplexity,2004,2004);#
		filename=paste(c("../Maps/",filename),collapse="")#
		print(filename)#
		filenames[si]=filename#
	}#
	filenames#
}#
#
#
habitatVariables=prepareHabitatVariables()#
setasidevals=c(20,0)#
scenariofiles=createScenarioFilenames(setasidevals)#
#
birdMaps<-lapply(scenariofiles,function(x) btoPredictMap(x,BTORegions,BBSModelCoefficients,nBBSSamp=100,threshold=0.7))#
pchanges=listChanges(birdMaps,birdMaps[[1]])#
save(pchanges,file="cache.RData")#
#
printBirdProjections(c("8","0"),pchanges,outline=FALSE,ylim=c(-100,400))#
#
cropMaps=lapply(scenariofiles,function(x) cropMap(x))#
startEPSDevice("crops",16,8)#
spatialListBarplot(cropMaps,ins=-0.085,rmcols=c(),asSPDF=TRUE,normalize=TRUE,names.arg=c("0","8"),marg=c(5,4,4,7))#
dev.off()
Q
setwd('/Users/iracooke/Projects/JFM/BTOBirds')
birdMaps<-lapply(scenariofiles,function(x) btoPredictMap(x,BTORegions,BBSModelCoefficients,nBBSSamp=100,threshold=0.7))
setwd('/Users/iracooke/Projects/JFM/BTOBirds')
source("../R/birds/R/Cropping.R")#
source("../R/birds/R/BTO.R")
Q
setwd('/Users/iracooke/Projects/JFM/BTOBirds')
#
source("../R/birds/R/Cropping.R")#
source("../R/birds/R/BTO.R")
setwd('/Users/iracooke/Projects/JFM/BTOBirds')
birdMaps<-lapply(scenariofiles,function(x) btoPredictMap(x,BTORegions,BBSModelCoefficients,nBBSSamp=100,threshold=0.7))
vars
vars[1,]
vars$arable
?mvnorm
?dmvnorm
?dmnorm
?dmvtnorm
require(mvtnorm)
?dmvnorm
?metrop
require(mcmc)
?metrop
system.file("java",package="farmland")
?install
?INSTALL
?SHLIB
?BUILD
?INSTALL
