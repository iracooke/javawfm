/*! \page install Installation
 * 
 * Before installing JFM ensure that you have a working Java Runtime Environment on your machine. 
 * Your Java should be version 1.5 or later. Recent versions of Mac OSX have this pre-installed. 
 * If you don't already have it java is a free download from 
 * [http:www.java.com/getjava]
 * 
 * \section basic Basic Install 
 * 
 * <em> Step 1: Download </em>
 * 
 * To Install the basic package without to ability to change the source code you need to download two files \n 
 * 
 * (1) The jfm.jar file (contains compiled Java code) \n 
 * (2) The native compiled c++ code required for solving the Linear Programme ( libjfmnative.dylib on Mac OSX  and jfmnative.dll on Windows)
 *  
 * <em> Step 2: Installing the  Java Library </em>
 *
 * Depending on where you put the jfm.jar file you now need to tell the Java Runtime where to find it. This is done differently on mac and windows.
 * 
 * \b Mac: Assuming you put jfm.jar into /Users/yourusername/Library/Java/jfm.jar, add the following line to your bash profile 
 * \verbatim export CLASSPATH=/Users/yourusername/Library/Java/jfm.jar \endverbatim
 * 
 * \b Windows: This assumes you put jfm.jar into "C:". In order to run JFM scripts from the DOS prompt you need to change the system variable, CLASSPATH. 
 * Do this by going to the start menu and 
 * right clicking on my computer, and then selecting properties. Select "advanced" and then  click "environment variables". 
 * Now edit the CLASSPATH variable by adding the following to the end.
 * \verbatim ;C:jfm.jar \endverbatim
 * 
 * If you are using cygwin you will need to edit your bash profile by adding the following line;
 * \verbatim export CLASSPATH="c:jfm.jar" \endverbatim
 *
 *
 *<em> Step 3: Installing the Native Library </em>
 *
 * \b Mac: Put the libjfmnative.dylib into /Users/yourusername/Library/Java/Extensions folder.  If the folder doesn't exist you might need to create it yourself.
 *
 * \b Windows: The simplest option is to put the dll into the directory where you will run the jfm but this is often not convenient. I have msys installed and put mine into c:/msys/bin. Other options are the /bin directory 
 * for your Java installation or a cygwin bin directory.  Ultimately the directory where the dll needs to go must be in java.library.path, which is a Java system variable automatically generated by the Java Runtime.
 * If your dll is in the wrong place you will get an "unsatisfied link error" when you try to run jfm.
 *
 * <em> Step 4: Test it </em>
 *
 * You can test to see if everything has worked by running a test file using the command;
 * \verbatim java -Xss512k jfm.SimpleApp test.xml \endverbatim
 *
 * 
 * \section devel Developer Install 
 * Most regular development of JFM is done in Java, so you will almost certainly not 
 * need the C++ sources required to build the native LP Solver Library. (Of course you will 
 * need a pre-compiled version of this library installed to run your code .. see above).
 * 
 * <em> Step 1: Download the Source </em>
 * The source code for JFM is available at http://code.google.com/p/javawfm/ \n
 * I recommend checking out this source using eclipse via the subversion plugin. 
 * Eclipse is a free download from [http://www.eclipse.org], and instructions on installing the 
 * subversion plugin for eclipse can be found at [http://subclipse.tigris.org/install.html].
 * 
 * Once subclipse is installed you can check out the jfm source code as follows;
 * 
 * (1) Go to File->New->Project \n
 * (2) Select "Checkout Projects from SVN" under the SVN tab \n
 * (3) Select "Create a new repository location", and enter ;\n
 * \verbatim http://javawfm.googlecode.com/svn/trunk/ \endverbatim
 * Note that if you want to commit changes you will need to use the https version of this 
 * repository and obtain a password (see instructions at [http://code.google.com/p/javawfm/source/checkout] ) \n
 * (4) Select the folder "java" \n
 * (5) Click Next and then Finish \n
 * (6) You should now see the New Project Wizard. Select "Java Project" from the list and click next \n
 * (7) Call the project javawfm \n
 * (8) Leave all defaults as they are and click next \n
 * (9) Click finish  \n
 * 
 * <em> Step 2: Automate the Build Process </em>
 * 
 * (1) Once the JFM source code is checked out go to "Project->Properties" \n
 * (2) Select "builders" from the left hand list and click "new" \n
 * (3) Select "Ant Builder" from the list of options \n
 * (4) Type "makejar" into the name field for the new builder \n
 * (5) In the buildfile field select "Browse Workspace" and select the file makejar.xml under the javawfm folder. \n
 * (6) Click OK. \n
 * 
 * <em> Step 3: Do a Build </em>
 * 
 * (1) Build the project by selecting "Build All" from the project menu.
 * 
 * <em> Step 4: Run the program </em>
 * (1) Put your newly create jfm.jar file into your CLASSPATH.  If you find that the new file is 
 * not registering changes you make this is probably because another jfm.jar file somewhere else is taking priority. To fix this, either put 
 * your new jfm.jar into the place where the old one resides ( by overwriting it), or change your CLASSPATH variable so that 
 * your javawfm build directory comes before any other directories. \n
 * (2) Run the code using 
 * \verbatim java -Xss512k jfm.SimpleApp example.xml \endverbatim
 * Sometimes you might also need more memory so use
 * \verbatim java -Xmx512m jfm.SimpleQApp example.xml \endverbatim
 * 
 * 
 * \section crazy Native Library Development Install
 * 
 * In the unlikely event that you want to make changes to the native library you will need to install the GLPK library. You will also need 
 * to check out the c++ sources (under [http://javawfm.googlecode.com/svn/trunk/native] ), and change the makefile to suit your system.
 * 
 * \subsection installglpk Installing GLPK
 * 
 * Download a recent version of GLPK (4.23 at the time of writing) from 
 * http://www.gnu.org/software/glpk/ \n
 * 
 * On Unix, issue configure and then make. 
 * \verbatim 
 	./configure 
 	make
 	sudo make install			\endverbatim 
 *
 *  This will install GLPK in <c> /usr/local/ </c> \n 
 *  It might be necessary to specify <c> --disable-shared </c> in order for compilation to work on 
 *  some systems (eg Mac OSX). \n
 *  Compiling the native library on windows requires some additional tools. I used the MinGW compiler in conjunction with msys as I could not get 
 *  the process to work using cygwin.
 */
