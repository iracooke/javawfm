# To compile the Windows version, you need to:
# - set JAVA_HOME to the JDK root (used for includes only)
# in addition if the pre-compiled stuff is not present, then also:
# - generate libjvm.dll.a from JDK's jvm.dll
#   (run `make' in `jvm-w32')
# - copy WinRegistry.dll into inst/libs

# You can modify the following line as the unlima ratio fallback.
# Shouldn't be necessary, because JAVA_HOME and autodetection
# have higher precedence.
DEFAULT_JAVA_HOME=C:\\jdk1.4.2_04

# this file is generated by configure.win and honors JAVA_HOME env.var
-include Makevars.java

ifeq ($(JAVA_HOME),)
JAVA_HOME:=$(DEFAULT_JAVA_HOME)
endif

$(warning JAVA_HOME is $(JAVA_HOME))

# normally you don't have to touch this unless you want to add
# debugging flags like -DRJ_DEBUG or -DRJ_PROFILE to PKG_CFLAGS
JAVA_INCLUDES=$(JAVA_HOME)/include $(JAVA_HOME)/include/win32
PKG_CPPFLAGS+= -I$(RHOME)/src/include $(JAVA_INCLUDES:%=-I%)
PKG_LIBS+=-Wall -shared -DWin32 -D_JNI_IMPLEMENTATION_ -Wl,--kill-at
#PKG_LIBS+= -ljvm.dll -Ljvm-w32

#$(warning PKG_CPPFLAGS are $(PKG_CPPFLAGS))

#JAVAINC=-I$(JAVA_HOME)/include -I$(JAVAHOME)/include/win32
#JAVA_LIBS=-Lwin32 -ljvm
#JNILD=-shared $(JAVA_LIBS) -Wl,--kill-at
PKG_CFLAGS+=-Wall -shared -DWin32 -D_JNI_IMPLEMENTATION_ -Wl,--kill-at
#LD_FLAGS+=-Wall -shared -D_JNI_IMPLEMENTATION_ -Wl,--kill-at
#JAVA_PROG=$(JAVAHOME)/bin/java
#JAVA=$(JAVAHOME)/bin/java
#JAVAC=$(JAVAHOME)/bin/javac
#JAVAH=$(JAVAHOME)/bin/javah
#JAR=$(JAVAHOME)/bin/jar
#JRIDEPS=win32/libjvm.dll.a
#JNIPREFIX=
#PLATFORMT=run.bat
#CC=gcc